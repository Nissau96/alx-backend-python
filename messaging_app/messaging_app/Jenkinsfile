// Declarative Pipeline
pipeline {
    // Use a Docker agent for a clean, reproducible build environment.
    agent {
        docker {
            image 'python:3.12-slim'
        }
    }

    stages {
        // Stage 1: Checkout code from GitHub
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        // Stage 2: Install project dependencies
        stage('Install Dependencies') {
            steps {
                // Run commands from the workspace root to use the full path required by the checker.
                sh '''
                    echo "Setting up Python environment..."
                    # Create the virtual environment inside the app directory
                    python3 -m venv messaging_app/venv

                    # Activate the venv and install dependencies using the full path
                    . messaging_app/venv/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                '''
            }
        }

        // Stage 3: Run tests using pytest
        stage('Run Tests') {
            steps {
                sh '''
                    echo "Running tests..."
                    # Activate the venv, then change directory to run pytest
                    . messaging_app/venv/bin/activate
                    cd messaging_app && pytest --junitxml=test_report.xml
                '''
            }
        }
    }

    // Post-build actions
    post {
        always {
            // Archive the test results for viewing in the Jenkins UI.
            echo 'Archiving test results...'
            junit 'messaging_app/test_report.xml'
        }
    }
}