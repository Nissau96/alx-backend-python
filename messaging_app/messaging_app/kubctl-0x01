#!/bin/bash
# A script to scale, load test, and monitor the messaging app deployment.

# --- Style and Logging Functions ---
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "\n${BLUE}[INFO] $1${NC}"; }
success() { echo -e "${GREEN}✓ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠ $1${NC}"; }
error() { echo -e "${RED}✗ $1${NC}"; exit 1; }
command_exists() { command -v "$1" >/dev/null 2>&1; }

# --- Prerequisite Checks ---
check_prerequisites() {
    log "Checking for required tools (kubectl, wrk)..."
    if ! command_exists kubectl; then
        error "kubectl could not be found. Please ensure it's installed and in your PATH."
    fi
    if ! command_exists wrk; then
        error "wrk could not be found. Please install it first (e.g., 'sudo apt-get install wrk' or 'brew install wrk')."
    fi
    success "All required client tools are installed."

    log "Checking for Kubernetes Metrics Server addon..."
    if ! minikube addons list | grep 'metrics-server.*enabled'; then
        warning "Metrics Server is not enabled. Enabling it now..."
        minikube addons enable metrics-server
        log "Waiting for Metrics Server to start..."
        sleep 30 
    fi
    success "Metrics Server is running."
}

# --- Main Logic ---
main() {
    local deployment_name="messaging-app-deployment"
    local service_name="messaging-app-service"
    local app_label="app=messaging-app"

    # 1. Scale the deployment
    log "Scaling deployment '$deployment_name' to 3 replicas..."
    kubectl scale deployment/"$deployment_name" --replicas=3
    
    log "Waiting for deployment to complete..."
    kubectl rollout status deployment/"$deployment_name"
    
    # 2. Verify the pods
    log "Verifying that 3 pods are running..."
    kubectl get pods -l "$app_label"
    local pod_count=$(kubectl get pods -l "$app_label" --no-headers | wc -l)
    if [ "$pod_count" -eq 3 ]; then
        success "Verification complete: 3 pods are running."
    else
        error "Scaling failed. Expected 3 pods, but found $pod_count."
    fi

    # 3. Perform load testing with wrk
    log "Preparing for load test by getting the service URL..."
    # The 'minikube service --url' command creates a tunnel to the internal service
    # and provides a URL that is accessible from your local machine.
    local service_url=$(minikube service "$service_name" --url)
    if [ -z "$service_url" ]; then
        error "Could not get service URL. Make sure the service is running."
    fi
    success "Service accessible at: $service_url"

    log "Starting load test with wrk for 30 seconds..."
    echo "Command: wrk -t4 -c100 -d30s $service_url"
    echo "(-t4: 4 threads, -c100: 100 connections, -d30s: 30 seconds duration)"
    wrk -t4 -c100 -d30s "$service_url"
    success "Load test completed."

    # 4. Monitor resource usage
    log "Displaying resource usage after load test..."
    echo "--- Node Usage (CPU/Memory) ---"
    kubectl top node
    echo ""
    echo "--- Pod Usage (CPU/Memory) ---"
    kubectl top pods -l "$app_label"
    success "Resource monitoring complete."
}

# --- Execution ---
check_prerequisites
main