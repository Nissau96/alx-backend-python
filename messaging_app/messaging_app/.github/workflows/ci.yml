# Name for the GitHub Actions workflow
name: Django CI

# Controls when the workflow will run
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]


jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Services are Docker containers that run alongside your job
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    
    steps:
      # Step 1: Checks-out your repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Sets up a Python environment
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Step 3: Installs dependencies, now including flake8 and coverage
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 coverage
          pip install -r messaging_app/requirements.txt

      # Step 4 : Runs flake8 for linting checks
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 messaging_app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings.
          flake8 messaging_app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Step 5 : Runs tests and generates a coverage report
      - name: Run Tests with Coverage
        env:
          DB_ENGINE: django.db.backends.mysql
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
        run: |
          cd messaging_app
          # Run tests with coverage
          coverage run manage.py test
          # Generate an HTML report in a directory named 'htmlcov'
          coverage html

      # Step 6 : Uploads the coverage report as a build artifact
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: messaging_app/htmlcov/
