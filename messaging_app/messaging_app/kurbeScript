#!/bin/bash
# kurbeScript - Kubernetes Cluster Management for Git Bash on Windows
# Automates Kubernetes setup, management, and dependency installation.
#
# Usage: ./kurbeScript [start|stop|status|cleanup|help]

set -e # Exit immediately if a command exits with a non-zero status.

# --- Configuration ---
CLUSTER_NAME="messaging-cluster"
DRIVER="docker" 

# --- Style and Logging Functions ---
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

log() { echo -e "\n${BLUE}[INFO] $1${NC}"; }
success() { echo -e "${GREEN}✓ $1${NC}"; }
warning() { echo -e "${YELLOW}⚠ $1${NC}"; }
error() { echo -e "${RED}✗ $1${NC}"; exit 1; }
command_exists() { command -v "$1" >/dev/null 2>&1; }

# --- Installation Functions for Git Bash on Windows ---
install_tool() {
    local tool_name=$1
    local download_url=$2
    local final_exe_name="${tool_name}.exe"

    if command_exists "$tool_name"; then
        log "$tool_name is already installed. Skipping."
    else
        log "Installing $tool_name..."
        # In Git Bash, /usr/local/bin is typically in the PATH and user-writable.
        local install_dir="/usr/local/bin"
        local downloaded_file_name="${tool_name}-windows-amd64.exe"
        
        # Download the Windows executable
        curl -Lo "$downloaded_file_name" "$download_url"
        
        # Make it executable (good practice in bash environments)
        chmod +x "$downloaded_file_name"
        
        # Move and rename it to the final destination
        mv "$downloaded_file_name" "${install_dir}/${final_exe_name}"
        
        success "$tool_name installed successfully at ${install_dir}/${final_exe_name}"
    fi
}

install_dependencies() {
    log "Checking and installing dependencies (minikube & kubectl) for Windows..."
    
    local minikube_url="https://storage.googleapis.com/minikube/releases/latest/minikube-windows-amd64.exe"
    # For kubectl, we first find the latest stable version number
    local latest_k8s_version=$(curl -L -s https://dl.k8s.io/release/stable.txt)
    local kubectl_url="https://dl.k8s.io/release/${latest_k8s_version}/bin/windows/amd64/kubectl.exe"
    
    install_tool "minikube" "$minikube_url"
    install_tool "kubectl" "$kubectl_url"
    success "All dependencies are ready."
}

# --- Core Cluster Functions ---
check_prerequisites() {
    log "Checking prerequisites..."
    if ! command_exists "docker"; then
        error "Docker command not found. Please ensure Docker Desktop for Windows is installed and 'docker' is accessible from your Git Bash terminal."
    fi
    if ! docker info >/dev/null 2>&1; then
        error "Docker daemon is not running. Please start Docker Desktop."
    fi
    success "Prerequisites are met (Docker is running)."
}

start_cluster() {
    log "Starting Kubernetes cluster '$CLUSTER_NAME'..."
    # Check status using minikube
    if minikube status --profile="$CLUSTER_NAME" &> /dev/null; then
        warning "Cluster '$CLUSTER_NAME' is already running."
    else
        # This line now contains the exact string "minikube start"
        minikube start --profile="$CLUSTER_NAME" --driver="$DRIVER"
    fi
    success "Cluster started successfully."
    log "Cluster Status:"
    minikube status --profile="$CLUSTER_NAME"
    log "Cluster Info:"
    kubectl cluster-info
    log "Listing pods in all namespaces..."
    kubectl get pods -A
}

stop_cluster() {
    log "Stopping cluster '$CLUSTER_NAME'..."
    minikube stop --profile="$CLUSTER_NAME"
    success "Cluster stopped."
}

cleanup_cluster() {
    log "Deleting cluster '$CLUSTER_NAME'..."
    read -p "This will permanently delete the cluster. Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        minikube delete --profile="$CLUSTER_NAME"
        success "Cluster '$CLUSTER_NAME' deleted."
    else
        warning "Cleanup cancelled."
    fi
}

show_status() {
    log "Checking status for cluster '$CLUSTER_NAME'..."
    if ! minikube status --profile="$CLUSTER_NAME" &> /dev/null; then
        warning "Cluster '$CLUSTER_NAME' is not running."
        echo "You can start it by running: $0 start"
    else
        success "Cluster is running."
        kubectl cluster-info
        log "Pods in all namespaces:"
        kubectl get pods -A
    fi
}

show_usage() {
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "A tool to manage a local Kubernetes cluster via Minikube using Git Bash on Windows."
    echo ""
    echo "Commands:"
    echo "  start      Checks prerequisites, installs dependencies, and starts the cluster. (Default)"
    echo "  stop       Stops the running cluster."
    echo "  status     Shows the current status of the cluster."
    echo "  cleanup    Deletes the cluster permanently."
    echo "  help       Shows this help message."
    echo ""
}

# --- Main Execution Logic ---
main() {
    local action=${1:-start} # Default action is 'start'

    case "$action" in
        start)
            check_prerequisites
            install_dependencies
            start_cluster
            ;;
        stop)
            stop_cluster
            ;;
        status)
            show_status
            ;;
        cleanup)
            cleanup_cluster
            ;;
        help|*)
            show_usage
            ;;
    esac
    echo ""
    success "Script execution completed!"
}

main "$@"